# -*- coding: utf-8 -*-
# MLC (Machine Learning Control): A genetic algorithm library to solve chaotic problems
# Copyright (C) 2015-2017, Thomas Duriez (thomas.duriez@gmail.com)
# Copyright (C) 2015, Adrian Durán (adrianmdu@gmail.com)
# Copyright (C) 2015-2017, Ezequiel Torres Feyuk (ezequiel.torresfeyuk@gmail.com)
# Copyright (C) 2016-2017, Marco Germano Zbrun (marco.germano@intraway.com)
# Copyright (C) 2016-2017, Raúl Lopez Skuba (raulopez0@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

import ctypes
import inspect
import threading

from MLC.GUI.Autogenerated.autogenerated import Ui_GenericSpinnerDialog
from MLC.GUI.Common.QtWaitingSpinner import QtWaitingSpinner
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtCore import QObject
from PyQt5.QtCore import QThread
from PyQt5.QtWidgets import QDialog
from threading import Thread
from MLC.Log.log import get_gui_logger
logger = get_gui_logger()


def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError("Only types can be raised (not instances)")
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,
                                                     ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # "if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)
        raise SystemError("PyThreadState_SetAsyncExc failed")


class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising exception in the thread from
       another thread.
    '''

    def _get_my_tid(self):
        """determines this (self's) thread id

        CAREFUL : this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        """
        if not self.isAlive():
            raise threading.ThreadError("the thread is not active")

        # do we have it cached?
        if hasattr(self, "_thread_id"):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do : self.ident

        raise AssertionError("could not determine the thread's id")

    def raiseExc(self, exctype):
        """Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raiseExc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raiseExc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL : this function is executed in the context of the
        caller thread, to raise an excpetion in the context of the
        thread represented by this instance.
        """
        _async_raise(self._get_my_tid(), exctype)


class ThreadCancelException(Exception):

    def __init__(self):
        Exception.__init__(self, "[GENERIC_SPINNER_THREAD] [THREAD_CANCELLED] - "
                                 "Thread was cancelled by the user")


class GenericSpinnerThread(ThreadWithExc, QObject):
    cancel_signal = pyqtSignal()
    finish_signal = pyqtSignal()

    def __init__(self, parent, execute_callback):
        ThreadWithExc.__init__(self)
        # QThread.__init__(self, parent)
        QObject.__init__(self, parent)

        self.__log_prefix = "[GENERIC_SPINNET_THREAD]"
        self.__execute_callback = execute_callback
        self.__execution_result = None
        self.__cancelled = False
        self.cancel_signal.connect(self.cancel_thread)

    def run(self):
        try:
            logger.info('{0} [RUN] - Proceed to execute callback'
                        .format(self.__log_prefix))
            self.__execution_result = self.__execute_callback()
            logger.info('{0} [RUN] - Callback was succesfully executed'
                        .format(self.__log_prefix))
            self.finish_signal.emit()
        except ThreadCancelException:
            logger.info('{0} [RUN] - Thread was cancelled by the user'
                        .format(self.__log_prefix))
            self._dialog.simulation_finished.emit()
            self.__cancelled = True

    def execution_result(self):
        return self.__cancelled, self.__execution_result

    def thread_was_cancelled(self):
        return self.__cancelled == True

    def cancel_thread(self):
        # self.raiseExc(ThreadCancelException)
        pass


class GenericSpinnerDialog(QDialog, QObject):
    finish_signal = pyqtSignal()

    def __init__(self, label_text, task_callback, parent=None):
        QDialog.__init__(self, parent)
        QObject.__init__(self, parent)
        self.__ui = Ui_GenericSpinnerDialog()
        self.__ui.setupUi(self)

        self.__label = self.__ui.spinner_label
        self.__label.setText("<b>{0}</b>".format(label_text))

        self.__spinner = QtWaitingSpinner(parent=self.__ui.spinner_widget,
                                          disableParentWhenSpinning=True)

        self.__thread = GenericSpinnerThread(parent=self,
                                             execute_callback=task_callback)
        self.__thread.finish_signal.connect(self.__callback_finished)

    def execute(self):
        self.__spinner.start()
        self.__thread.start()
        self.exec_()

    def __callback_finished(self):
        self.__spinner.stop()
        self.close()

    def on_cancel_button_clicked(self):
        # self.__thread.cancel_signal.emit()
        self.__thread.raiseExc(ThreadCancelException)
