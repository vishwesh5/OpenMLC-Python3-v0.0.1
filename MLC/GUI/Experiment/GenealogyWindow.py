# -*- coding: utf-8 -*-
# MLC (Machine Learning Control): A genetic algorithm library to solve chaotic problems
# Copyright (C) 2015-2017, Thomas Duriez (thomas.duriez@gmail.com)
# Copyright (C) 2015, Adrian Durán (adrianmdu@gmail.com)
# Copyright (C) 2015-2017, Ezequiel Torres Feyuk (ezequiel.torresfeyuk@gmail.com)
# Copyright (C) 2016-2017, Marco Germano Zbrun (marco.germano@intraway.com)
# Copyright (C) 2016-2017, Raúl Lopez Skuba (raulopez0@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

from MLC.GUI.Autogenerated.autogenerated import Ui_GenealogyWindow
from MLC.GUI.Common.GenericSpinnerDialog import GenericSpinnerDialog
from MLC.GUI.Experiment.QtCharts.GenealogyChart import GenealogyChart
from PyQt5.QtWidgets import QMainWindow


class GenealogyWindow(QMainWindow):

    def __init__(self, parent, experiment_name, mlc_local, generation, individual):
        QMainWindow.__init__(self, parent)
        self._autogenerated_object = Ui_GenealogyWindow()
        self._autogenerated_object.setupUi(self)

        self._mlc_local = mlc_local
        self._experiment_name = experiment_name
        self._generation = generation
        self._individual = individual

        # spinner = GenericSpinnerDialog(parent=self,
        #                                label_text="Rendering Genealogy Chart. Please wait...",
        #                                task_callback=self._create_genealogy_chart)
        # cancel = spinner.execute()
        self._create_genealogy_chart()

    def _create_genealogy_chart(self):
        self._genealogy_chart = GenealogyChart(self._mlc_local, self._experiment_name,
                                               self._generation, self._individual)
        self._create_new_chart()

    def _create_new_chart(self):
        chart_layout = self._autogenerated_object.chart_layout

        # Remove all previous widgets before rendering again
        for i in reversed(range(chart_layout.count())):
            chart_layout.itemAt(i).widget().setParent(None)
        # Add the Indiv Canvas
        chart_layout.addWidget(self._genealogy_chart.get_widget())
